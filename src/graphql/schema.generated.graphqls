type Cart {
	id: ID!
	items: [CartItem!]!
}

type CartItem {
	id: ID!
	product: Product!
	productId: String!
	quantity: Int!
}

input CartItemInput {
	productId: String!
	quantity: Int = 1
}

type Category {
	description: String!
	id: ID!
	name: String!
	products: [Product!]!
	slug: String!
}

type CategoryList {
	data: [Category!]!
	meta: ListMeta!
}

type Collection {
	description: String!
	id: ID!
	name: String!
	products: [Product!]!
	slug: String!
}

type CollectionList {
	data: [Collection!]!
	meta: ListMeta!
}

scalar DateTime

scalar JSON

type ListMeta {
	count: Int!
	total: Int!
}

type Mutation {
	cartAddItem(id: ID!, input: MutationCartAddItemInput!): Cart!
	cartChangeItemQuantity(id: ID!, productId: ID!, quantity: Int!): Cart!
	cartFindOrCreate(id: ID, input: MutationCartFindOrCreateInput!): Cart!
	cartRemoveItem(id: ID!, productId: ID!): Cart!
}

input MutationCartAddItemInput {
	productId: String!
	quantity: Int = 1
}

input MutationCartFindOrCreateInput {
	items: [CartItemInput!]
}

type Order {
	createdAt: DateTime!
	id: ID!
	lines: JSON!
	status: OrderStatus!
	totalAmount: Int!
	updatedAt: DateTime!
}

type OrderList {
	data: [Order!]!
	meta: ListMeta!
}

enum OrderSortBy {
	DEFAULT
	NAME
	PRICE
	RATING
}

enum OrderStatus {
	CANCELLED
	COMPLETED
	PENDING
}

type Product {
	categories: [Category!]!
	collections: [Collection!]!
	createdAt: DateTime!
	description: String!
	id: ID!
	images: [ProductImage!]!
	name: String!
	price: Int!
	rating: Float
	reviews: [Review!]!
	slug: String!
	updatedAt: DateTime!
}

type ProductImage {
	alt: String!
	height: Int!
	id: ID!
	product: Product!
	productId: ID!
	url: String!
	width: Int!
}

type ProductList {
	data: [Product!]!
	meta: ListMeta!
}

enum ProductSortBy {
	DEFAULT
	NAME
	PRICE
	RATING
}

type Query {
	cart(id: ID!): Cart
	categories(skip: Int! = 0, take: Int! = 10): CategoryList!
	category(id: ID, slug: String): Category
	collection(id: ID, slug: String): Collection
	collections(skip: Int! = 0, take: Int! = 10): CollectionList!
	order(id: ID!): Order!
	orders(
		email: String!
		order: SortDirection! = ASC
		orderBy: OrderSortBy! = DEFAULT
		skip: Int! = 0
		take: Int! = 10
	): OrderList!
	product(id: ID, slug: String): Product!
	products(
		order: SortDirection! = ASC
		orderBy: ProductSortBy! = DEFAULT
		search: String
		skip: Int! = 0
		take: Int! = 10
	): ProductList!
}

type Review {
	author: String!
	createdAt: DateTime!
	description: String!
	email: String!
	id: ID!
	product: Product!
	productId: ID!
	rating: Float!
	title: String!
	updatedAt: DateTime!
}

enum SortDirection {
	ASC
	DESC
}
